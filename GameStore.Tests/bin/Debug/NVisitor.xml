<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NVisitor</name>
    </assembly>
    <members>
        <member name="T:NVisitor.Api.FuncPair.FuncPairDirector`4">
            <summary>
                A Director
                1) Is the entry-point for a visit
                2) Dispatches visit to the best visitor
                3) Holds the state of the visit via its property State
            </summary>
            <typeparam name="TFamily1">The node1 family type</typeparam>
            <typeparam name="TFamily2">The node2 family type</typeparam>
            <typeparam name="TDir"> Identifies the visitor's class and can contain the state of the visit</typeparam>
            <typeparam name="TResult">Result of Visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.FuncPair.IFuncPairDirector`4">
            <summary>Director's contract published to the visitors</summary>
            <typeparam name="TFamily1">The node1 family</typeparam>
            <typeparam name="TFamily2">The node2 family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TResult">Result of the Visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.Marker.IDirectorMarker">
            <summary>Marker identifying a dispatcher. Can be used to inject all directors into IoC container</summary>
        </member>
        <member name="M:NVisitor.Api.FuncPair.FuncPairDirector`4.#ctor(System.Collections.Generic.IEnumerable{NVisitor.Api.FuncPair.IFuncPairVisitorClass{`0,`1,`2,`3}})">
            <summary>Initializes a new director for a set of visitors</summary>
            <param name="visitorEnumerable">list of visitors belonging to the same visitor class</param>
        </member>
        <member name="M:NVisitor.Api.FuncPair.FuncPairDirector`4.#ctor(NVisitor.Api.FuncPair.IFuncPairVisitMapper{`0,`1,`2,`3})">
            <summary>Initializes a new director with a shared visitMapper</summary>
            <param name="visitMapper">shared visitMapper for all directors of this type</param>
        </member>
        <member name="M:NVisitor.Api.FuncPair.FuncPairDirector`4.Visit(`0,`1)">
            <summary>Dispatches the call to the best visitor depending on the node's type</summary>
            <param name="node1">The node1 to visit</param>
            <param name="node2">The node2 to visit</param>
        </member>
        <member name="T:NVisitor.Api.FuncPair.FuncPairVisitMapper`4">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily1">Node1's family</typeparam>
            <typeparam name="TFamily2">Node2's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
            <typeparam name="TResult">Result of visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.Common.PairVisitMapperBase`4">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily1">Node1's family</typeparam>
            <typeparam name="TFamily2">Node2's family</typeparam>
            <typeparam name="TVisitDelegate">the visit delegate</typeparam>
            <typeparam name="TVisitorClass">The visitor's class characterizing all visitors of a director</typeparam>
        </member>
        <member name="T:NVisitor.Api.Common.IPairVisitMapperBase`3">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily1">Node1's family</typeparam>
            <typeparam name="TFamily2">Node2's family</typeparam>
            <typeparam name="TVisitDelegate">the visit delegate</typeparam>
        </member>
        <member name="T:NVisitor.Api.Marker.IVisitMapperMarker">
            <summary>Marker identifying a visit mapper. Can be used to inject all visitors into IoC container</summary>
        </member>
        <member name="M:NVisitor.Api.Common.PairVisitMapperBase`4.CreateVisitDelegate(`0,`1,System.Type,System.Type,`2,`3)">
            <summary>Factory to implement in concrete implementations</summary>
        </member>
        <member name="T:NVisitor.Api.FuncPair.IFuncPairVisitMapper`4">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily1">Node1's family</typeparam>
            <typeparam name="TFamily2">Node2's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
            <typeparam name="TResult">Result of the Visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.FuncPair.IFuncPairVisitor`6">
            <summary>Visitor's contract</summary>
            <typeparam name="TFamily1">The node1 family</typeparam>
            <typeparam name="TFamily2">The node2 family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TNode1">The concrete node1 type supported by the visitor</typeparam>
            <typeparam name="TNode2">The concrete node2 type supported by the visitor</typeparam>
            <typeparam name="TResult">Result of the Visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.FuncPair.IFuncPairVisitorClass`4">
            <summary>Identify the class of visitors related to a director</summary>
        </member>
        <member name="T:NVisitor.Api.Marker.IVisitorMarker">
            <summary>Marker identifying a visitor. Can be used to inject all visitors into IoC container</summary>
        </member>
        <member name="M:NVisitor.Api.FuncPair.IFuncPairVisitor`6.Visit(`2,`3,`4)">
            <summary>The visit method to implement</summary>
            <param name="director">director to continue the visit or read/write into the director's state </param>
            <param name="node1">The node1 to visit</param>
            <param name="node2">The node2 to visit</param>
        </member>
        <member name="T:NVisitor.Api.ActionPayload.ActionPayloadDirector`3">
            <summary>
                A Director for visitor having a payload argument.
                This type of visitor is especially useful if you want to process concurrently a node family: With the payload and
                the return-value, you
                avoid the problem of shared resources in concurrent environment.
                1) Is the entry-point for a visit
                2) Dispatches visit to the best visitor
                3) Holds the state of the visit via its property State
            </summary>
            <typeparam name="TFamily">The node family type</typeparam>
            <typeparam name="TDir"> Identifies the visitor's class and can contain the state of the visit</typeparam>
            <typeparam name="TPayload">Payload for the visit call</typeparam>
        </member>
        <member name="T:NVisitor.Api.ActionPayload.IActionPayloadDirector`3">
            <summary>Director's contract published to the visitors</summary>
            <typeparam name="TFamily">The node family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TPayload">Payload for the visit call</typeparam>
        </member>
        <member name="M:NVisitor.Api.ActionPayload.ActionPayloadDirector`3.#ctor(System.Collections.Generic.IEnumerable{NVisitor.Api.ActionPayload.IActionPayloadVisitorClass{`0,`1,`2}})">
            <summary>Initializes a new director for a set of visitors</summary>
            <param name="visitorEnumerable">list of visitors belonging to the same visitor class</param>
        </member>
        <member name="M:NVisitor.Api.ActionPayload.ActionPayloadDirector`3.#ctor(NVisitor.Api.ActionPayload.IActionPayloadVisitMapper{`0,`1,`2})">
            <summary>Initializes a new director with a shared visitMapper</summary>
            <param name="visitMapper">shared visitMapper for all directors of this type</param>
        </member>
        <member name="M:NVisitor.Api.ActionPayload.ActionPayloadDirector`3.Visit(`0,`2)">
            <summary>Dispatches the call to the best visitor depending on the node's type</summary>
            <param name="node">The node to visit</param>
            <param name="payload">Payload to pass to the visitor</param>
        </member>
        <member name="T:NVisitor.Api.ActionPayload.ActionPayloadVisitMapper`3">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily">Node's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
            <typeparam name="TPayload">Payload passed to visitor</typeparam>
        </member>
        <member name="T:NVisitor.Api.Common.VisitMapperBase`3">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily">Node's family</typeparam>
            <typeparam name="TVisitDelegate">the visit delegate</typeparam>
            <typeparam name="TVisitorClass">The visitor's class characterizing all visitors of a director</typeparam>
        </member>
        <member name="T:NVisitor.Api.Common.IVisitMapperBase`2">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily">Node's family</typeparam>
            <typeparam name="TVisitDelegate">the visit delegate</typeparam>
        </member>
        <member name="M:NVisitor.Api.Common.VisitMapperBase`3.CreateVisitDelegate(`0,System.Type,`1,`2)">
            <summary>Factory to implement in concrete implementations</summary>
        </member>
        <member name="T:NVisitor.Api.ActionPayload.IActionPayloadVisitMapper`3">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily">Node's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
            <typeparam name="TPayload">Payload for the visit call</typeparam>
        </member>
        <member name="T:NVisitor.Api.ActionPayload.IActionPayloadVisitor`4">
            <summary>Visitor's contract</summary>
            <typeparam name="TFamily">The node family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TNode">The concrete node type supported by the visitor</typeparam>
            <typeparam name="TPayload">Payload for the visit call</typeparam>
        </member>
        <member name="T:NVisitor.Api.ActionPayload.IActionPayloadVisitorClass`3">
            <summary>Identify the class of visitors related to a FuncDirector</summary>
        </member>
        <member name="M:NVisitor.Api.ActionPayload.IActionPayloadVisitor`4.Visit(`1,`2,`3)">
            <summary>The visit method to implement</summary>
            <param name="director">director to continue the visit or read/write into the director's state </param>
            <param name="node">The node to visit</param>
            <param name="payload">The payload to pass to the visitor during the visit</param>
            <returns>The result of the visit</returns>
        </member>
        <member name="T:NVisitor.Api.ActionPayloadPair.ActionPayloadPairDirector`4">
            <summary>
                A Director
                1) Is the entry-point for a visit
                2) Dispatches visit to the best visitor
                3) Holds the state of the visit via its property State
            </summary>
            <typeparam name="TFamily1">The node1 family type</typeparam>
            <typeparam name="TFamily2">The node2 family type</typeparam>
            <typeparam name="TDir"> Identifies the visitor's class and can contain the state of the visit</typeparam>
            <typeparam name="TPayload">Payload passed to visitor</typeparam>
        </member>
        <member name="T:NVisitor.Api.ActionPayloadPair.IActionPayloadPairDirector`4">
            <summary>Director's contract published to the visitors</summary>
            <typeparam name="TFamily1">The node1 family</typeparam>
            <typeparam name="TFamily2">The node2 family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TPayload">Payload passed to visitor</typeparam>
        </member>
        <member name="M:NVisitor.Api.ActionPayloadPair.ActionPayloadPairDirector`4.#ctor(System.Collections.Generic.IEnumerable{NVisitor.Api.ActionPayloadPair.IActionPayloadPairVisitorClass{`0,`1,`2,`3}})">
            <summary>Initializes a new director for a set of visitors</summary>
            <param name="visitorEnumerable">list of visitors belonging to the same visitor class</param>
        </member>
        <member name="M:NVisitor.Api.ActionPayloadPair.ActionPayloadPairDirector`4.#ctor(NVisitor.Api.ActionPayloadPair.IActionPayloadPairVisitMapper{`0,`1,`2,`3})">
            <summary>Initializes a new director with a shared visitMapper</summary>
            <param name="visitMapper">shared visitMapper for all directors of this type</param>
        </member>
        <member name="M:NVisitor.Api.ActionPayloadPair.ActionPayloadPairDirector`4.Visit(`0,`1,`3)">
            <summary>Dispatches the call to the best visitor depending on the node's type</summary>
            <param name="node1">The node1 to visit</param>
            <param name="node2">The node2 to visit</param>
            <param name="payload">payload passed to visitor</param>
        </member>
        <member name="T:NVisitor.Api.ActionPayloadPair.ActionPayloadPairVisitMapper`4">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily1">Node1's family</typeparam>
            <typeparam name="TFamily2">Node2's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
            <typeparam name="TPayload">Payload passed to visitor</typeparam>
        </member>
        <member name="T:NVisitor.Api.ActionPayloadPair.IActionPayloadPairVisitMapper`4">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily1">Node1's family</typeparam>
            <typeparam name="TFamily2">Node2's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
            <typeparam name="TPayload">Payload passed to visitor</typeparam>
        </member>
        <member name="T:NVisitor.Api.ActionPayloadPair.IActionPayloadPairVisitor`6">
            <summary>Visitor's contract</summary>
            <typeparam name="TFamily1">The node1 family</typeparam>
            <typeparam name="TFamily2">The node2 family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TNode1">The concrete node1 type supported by the visitor</typeparam>
            <typeparam name="TNode2">The concrete node2 type supported by the visitor</typeparam>
            <typeparam name="TPayload">Payload passed to visitor</typeparam>
        </member>
        <member name="T:NVisitor.Api.ActionPayloadPair.IActionPayloadPairVisitorClass`4">
            <summary>Identify the class of visitors related to a director</summary>
        </member>
        <member name="M:NVisitor.Api.ActionPayloadPair.IActionPayloadPairVisitor`6.Visit(`2,`3,`4,`5)">
            <summary>The visit method to implement</summary>
            <param name="director">director to continue the visit or read/write into the director's state </param>
            <param name="node1">The node1 to visit</param>
            <param name="node2">The node2 to visit</param>
            <param name="payload">Payload passed to visitor</param>
        </member>
        <member name="T:NVisitor.Api.FuncPayloadPair.FuncPayloadPairDirector`5">
            <summary>
                A Director
                1) Is the entry-point for a visit
                2) Dispatches visit to the best visitor
                3) Holds the state of the visit via its property State
            </summary>
            <typeparam name="TFamily1">The node1 family type</typeparam>
            <typeparam name="TFamily2">The node2 family type</typeparam>
            <typeparam name="TDir"> Identifies the visitor's class and can contain the state of the visit</typeparam>
            <typeparam name="TPayload">Payload passed to visitor during the visit</typeparam>
            <typeparam name="TResult">Result of the visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.FuncPayloadPair.IFuncPayloadPairDirector`5">
            <summary>Director's contract published to the visitors</summary>
            <typeparam name="TFamily1">The node1 family</typeparam>
            <typeparam name="TFamily2">The node2 family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TPayload">Payload passed to visitor during the visit</typeparam>
            <typeparam name="TResult">Result of the visit</typeparam>
        </member>
        <member name="M:NVisitor.Api.FuncPayloadPair.FuncPayloadPairDirector`5.#ctor(System.Collections.Generic.IEnumerable{NVisitor.Api.FuncPayloadPair.IFuncPayloadPairVisitorClass{`0,`1,`2,`3,`4}})">
            <summary>Initializes a new director for a set of visitors</summary>
            <param name="visitorEnumerable">list of visitors belonging to the same visitor class</param>
        </member>
        <member name="M:NVisitor.Api.FuncPayloadPair.FuncPayloadPairDirector`5.#ctor(NVisitor.Api.FuncPayloadPair.IFuncPayloadPairVisitMapper{`0,`1,`2,`3,`4})">
            <summary>Initializes a new director with a shared visitMapper</summary>
            <param name="visitMapper">shared visitMapper for all directors of this type</param>
        </member>
        <member name="M:NVisitor.Api.FuncPayloadPair.FuncPayloadPairDirector`5.Visit(`0,`1,`3)">
            <summary>Dispatches the call to the best visitor depending on the node's type</summary>
            <param name="node1">The node1 to visit</param>
            <param name="node2">The node2 to visit</param>
            <param name="payload">Result of the visit</param>
        </member>
        <member name="T:NVisitor.Api.FuncPayloadPair.FuncPayloadPairVisitMapper`5">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily1">Node1's family</typeparam>
            <typeparam name="TFamily2">Node2's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
            <typeparam name="TPayload">Payload passed to visitor during the visit</typeparam>
            <typeparam name="TResult">Result of the visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.FuncPayloadPair.IFuncPayloadPairVisitMapper`5">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily1">Node1's family</typeparam>
            <typeparam name="TFamily2">Node2's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
            <typeparam name="TPayload">Payload passed to visitor during the visit</typeparam>
            <typeparam name="TResult">Result of the visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.FuncPayloadPair.IFuncPayloadPairVisitor`7">
            <summary>Visitor's contract</summary>
            <typeparam name="TFamily1">The node1 family</typeparam>
            <typeparam name="TFamily2">The node2 family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TNode1">The concrete node1 type supported by the visitor</typeparam>
            <typeparam name="TNode2">The concrete node2 type supported by the visitor</typeparam>
            <typeparam name="TPayload">Payload passed to visitor during the visit</typeparam>
            <typeparam name="TResult">Result of the visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.FuncPayloadPair.IFuncPayloadPairVisitorClass`5">
            <summary>Identify the class of visitors related to a director</summary>
        </member>
        <member name="M:NVisitor.Api.FuncPayloadPair.IFuncPayloadPairVisitor`7.Visit(`2,`3,`4,`5)">
            <summary>The visit method to implement</summary>
            <param name="director">director to continue the visit or read/write into the director's state </param>
            <param name="node1">The node1 to visit</param>
            <param name="node2">The node2 to visit</param>
            <param name="payload">Payload passed to visitor during the visit</param>
        </member>
        <member name="T:NVisitor.Api.Func.FuncDirector`3">
            <summary>Director for function visitor</summary>
            <typeparam name="TFamily">The node family type</typeparam>
            <typeparam name="TDir"> Identifies the visitor's class and can contain the state of the visit</typeparam>
            <typeparam name="TResult">Result of the Visit call</typeparam>
        </member>
        <member name="T:NVisitor.Api.Func.IFuncDirector`3">
            <summary>Director's contract published to the visitors</summary>
            <typeparam name="TFamily">The node family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TResult">Result of the Visit call</typeparam>
        </member>
        <member name="M:NVisitor.Api.Func.FuncDirector`3.#ctor(System.Collections.Generic.IEnumerable{NVisitor.Api.Func.IFuncVisitorClass{`0,`1,`2}})">
            <summary>Initializes a new director for a set of visitors</summary>
            <param name="visitorEnumerable">list of visitors belonging to the same visitor class</param>
        </member>
        <member name="M:NVisitor.Api.Func.FuncDirector`3.#ctor(NVisitor.Api.Func.IFuncVisitMapper{`0,`1,`2})">
            <summary>Initializes a new director with a shared visitMapper</summary>
            <param name="visitMapper">shared visitMapper for all directors of this type</param>
        </member>
        <member name="M:NVisitor.Api.Func.FuncDirector`3.Visit(`0)">
            <summary>Dispatches the call to the best visitor depending on the node's type</summary>
            <param name="node">The node to visit</param>
        </member>
        <member name="T:NVisitor.Api.Func.FuncVisitMapper`3">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily">Node's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
            <typeparam name="TResult">Result Type of the visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.Func.IFuncVisitMapper`3">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily">Node's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
            <typeparam name="TResult">Result of the Visit call</typeparam>
        </member>
        <member name="T:NVisitor.Api.Func.IFuncVisitor`4">
            <summary>Visitor's contract</summary>
            <typeparam name="TFamily">The node family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TNode">The concrete node type supported by the visitor</typeparam>
            <typeparam name="TResult">Result of the Visit call</typeparam>
        </member>
        <member name="T:NVisitor.Api.Func.IFuncVisitorClass`3">
            <summary>Identify the class of visitors related to a FuncDirector</summary>
        </member>
        <member name="M:NVisitor.Api.Func.IFuncVisitor`4.Visit(`1,`2)">
            <summary>The visit method to implement</summary>
            <param name="director">director to continue the visit or read/write into the director's state </param>
            <param name="node">The node to visit</param>
            <returns>The result of the visit</returns>
        </member>
        <member name="T:NVisitor.Api.FuncPayload.FuncPayloadDirector`4">
            <summary>
                A Director for visitor having a payload argument and a return value (function).
                This type of visitor is especially useful if you want to process concurrently a node family: With the payload and
                the return-value, you
                avoid the problem of shared resources in concurrent environment.
                1) Is the entry-point for a visit
                2) Dispatches visit to the best visitor
                3) Holds the state of the visit via its property State
            </summary>
            <typeparam name="TFamily">The node family type</typeparam>
            <typeparam name="TDir"> Identifies the visitor's class and can contain the state of the visit</typeparam>
            <typeparam name="TResult">Result of the Visit call</typeparam>
            <typeparam name="TPayload">Payload for the visit call</typeparam>
        </member>
        <member name="T:NVisitor.Api.FuncPayload.IFuncPayloadDirector`4">
            <summary>Director's contract published to the visitors</summary>
            <typeparam name="TFamily">The node family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TResult">Result of the Visit call</typeparam>
            <typeparam name="TPayload">Payload for the visit call</typeparam>
        </member>
        <member name="M:NVisitor.Api.FuncPayload.FuncPayloadDirector`4.#ctor(System.Collections.Generic.IEnumerable{NVisitor.Api.FuncPayload.IFuncPayloadVisitorClass{`0,`1,`2,`3}})">
            <summary>Initializes a new director for a set of visitors</summary>
            <param name="visitorEnumerable">list of visitors belonging to the same visitor class</param>
        </member>
        <member name="M:NVisitor.Api.FuncPayload.FuncPayloadDirector`4.#ctor(NVisitor.Api.FuncPayload.IFuncPayloadVisitMapper{`0,`1,`2,`3})">
            <summary>Initializes a new director with a shared visitMapper</summary>
            <param name="visitMapper">shared visitMapper for all directors of this type</param>
        </member>
        <member name="M:NVisitor.Api.FuncPayload.FuncPayloadDirector`4.Visit(`0,`2)">
            <summary>Dispatches the call to the best visitor depending on the node's type</summary>
            <param name="node">The node to visit</param>
            <param name="payload">Payload to pass to the visitor</param>
        </member>
        <member name="T:NVisitor.Api.FuncPayload.IFuncPayloadVisitMapper`4">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily">Node's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
            <typeparam name="TResult">Result of the Visit call</typeparam>
            <typeparam name="TPayload">Payload for the visit call</typeparam>
        </member>
        <member name="T:NVisitor.Api.FuncPayload.IFuncPayloadVisitor`5">
            <summary>Visitor's contract</summary>
            <typeparam name="TFamily">The node family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TNode">The concrete node type supported by the visitor</typeparam>
            <typeparam name="TResult">Result of the Visit call</typeparam>
            <typeparam name="TPayload">Payload for the visit call</typeparam>
        </member>
        <member name="T:NVisitor.Api.FuncPayload.IFuncPayloadVisitorClass`4">
            <summary>Identify the class of visitors related to a FuncDirector</summary>
        </member>
        <member name="M:NVisitor.Api.FuncPayload.IFuncPayloadVisitor`5.Visit(`1,`2,`3)">
            <summary>The visit method to implement</summary>
            <param name="director">director to continue the visit or read/write into the director's state </param>
            <param name="node">The node to visit</param>
            <param name="payload">The payload to pass to the visitor during the visit</param>
            <returns>The result of the visit</returns>
        </member>
        <member name="T:NVisitor.Api.FuncPayload.FuncPayloadVisitMapper`4">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily">Node's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
            <typeparam name="TPayload">Payload passed to visitor during the visit</typeparam>
            <typeparam name="TResult">Result of the visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.ActionPair.ActionPairDirector`3">
            <summary>
                A Director
                1) Is the entry-point for a visit
                2) Dispatches visit to the best visitor
                3) Holds the state of the visit via its property State
            </summary>
            <typeparam name="TFamily1">The node1 family type</typeparam>
            <typeparam name="TFamily2">The node2 family type</typeparam>
            <typeparam name="TDir"> Identifies the visitor's class and can contain the state of the visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.ActionPair.IActionPairDirector`3">
            <summary>Director's contract published to the visitors</summary>
            <typeparam name="TFamily1">The node1 family</typeparam>
            <typeparam name="TFamily2">The node2 family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
        </member>
        <member name="M:NVisitor.Api.ActionPair.ActionPairDirector`3.#ctor(System.Collections.Generic.IEnumerable{NVisitor.Api.ActionPair.IActionPairVisitorClass{`0,`1,`2}})">
            <summary>Initializes a new director for a set of visitors</summary>
            <param name="visitorEnumerable">list of visitors belonging to the same visitor class</param>
        </member>
        <member name="M:NVisitor.Api.ActionPair.ActionPairDirector`3.#ctor(NVisitor.Api.ActionPair.IActionPairVisitMapper{`0,`1,`2})">
            <summary>Initializes a new director with a shared visitMapper</summary>
            <param name="visitMapper">shared visitMapper for all directors of this type</param>
        </member>
        <member name="M:NVisitor.Api.ActionPair.ActionPairDirector`3.Visit(`0,`1)">
            <summary>Dispatches the call to the best visitor depending on the node's type</summary>
            <param name="node1">The node1 to visit</param>
            <param name="node2">The node2 to visit</param>
        </member>
        <member name="T:NVisitor.Api.ActionPair.IActionPairVisitMapper`3">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily1">Node1's family</typeparam>
            <typeparam name="TFamily2">Node2's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
        </member>
        <member name="T:NVisitor.Api.ActionPair.IActionPairVisitor`5">
            <summary>Visitor's contract</summary>
            <typeparam name="TFamily1">The node1 family</typeparam>
            <typeparam name="TFamily2">The node2 family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TNode1">The concrete node1 type supported by the visitor</typeparam>
            <typeparam name="TNode2">The concrete node2 type supported by the visitor</typeparam>
        </member>
        <member name="T:NVisitor.Api.ActionPair.IActionPairVisitorClass`3">
            <summary>Identify the class of visitors related to a director</summary>
        </member>
        <member name="M:NVisitor.Api.ActionPair.IActionPairVisitor`5.Visit(`2,`3,`4)">
            <summary>The visit method to implement</summary>
            <param name="director">director to continue the visit or read/write into the director's state </param>
            <param name="node1">The node1 to visit</param>
            <param name="node2">The node2 to visit</param>
        </member>
        <member name="T:NVisitor.Api.ActionPair.ActionPairVisitMapper`3">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily1">Node1's family</typeparam>
            <typeparam name="TFamily2">Node2's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
        </member>
        <member name="T:NVisitor.Api.Action.ActionDirector`2">
            <summary>
                A Director
                1) Is the entry-point for a visit
                2) Dispatches visit to the best visitor
                3) Holds the state of the visit via its property State
            </summary>
            <typeparam name="TFamily">The node family type</typeparam>
            <typeparam name="TDir"> Identifies the visitor's class and can contain the state of the visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.Action.IActionDirector`2">
            <summary>Director's contract published to the visitors</summary>
            <typeparam name="TFamily">The node family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
        </member>
        <member name="M:NVisitor.Api.Action.ActionDirector`2.#ctor(System.Collections.Generic.IEnumerable{NVisitor.Api.Action.IActionVisitorClass{`0,`1}})">
            <summary>Initializes a new director for a set of visitors</summary>
            <param name="visitorEnumerable">list of visitors belonging to the same visitor class</param>
        </member>
        <member name="M:NVisitor.Api.Action.ActionDirector`2.#ctor(NVisitor.Api.Action.IActionVisitMapper{`0,`1})">
            <summary>Initializes a new director with a shared visitMapper</summary>
            <param name="visitMapper">shared visitMapper for all directors of this type</param>
        </member>
        <member name="M:NVisitor.Api.Action.ActionDirector`2.Visit(`0)">
            <summary>Dispatches the call to the best visitor depending on the node's type</summary>
            <param name="node">The node to visit</param>
        </member>
        <member name="T:NVisitor.Api.Action.IActionVisitMapper`2">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily">Node's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
        </member>
        <member name="T:NVisitor.Api.Action.IActionVisitor`3">
            <summary>Visitor's contract</summary>
            <typeparam name="TFamily">The node family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TNode">The concrete node type supported by the visitor</typeparam>
        </member>
        <member name="T:NVisitor.Api.Action.IActionVisitorClass`2">
            <summary>Identify the class of visitors related to a director</summary>
        </member>
        <member name="M:NVisitor.Api.Action.IActionVisitor`3.Visit(`1,`2)">
            <summary>The visit method to implement</summary>
            <param name="director">director to continue the visit or read/write into the director's state </param>
            <param name="node">The node to visit</param>
        </member>
        <member name="T:NVisitor.Api.Action.ActionVisitMapper`2">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily">Node's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
        </member>
        <member name="T:NVisitor.Api.Lazy.ILazyVisitMapper`2">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily">Node's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
        </member>
        <member name="T:NVisitor.Api.Lazy.LazyVisitMapper`2">
            <summary>Map a node to its related visit-action. Used by the director to send visitor visit the node</summary>
            <typeparam name="TFamily">Node's family</typeparam>
            <typeparam name="TDir">Director type</typeparam>
        </member>
        <member name="T:NVisitor.Api.Lazy.LazyDirector`2">
            <summary>
                A Director
                1) Is the entry-point for a visit
                2) Dispatches visit to the best visitor
                3) Holds the state of the visit via its property State
            </summary>
            <typeparam name="TFamily">The node family type</typeparam>
            <typeparam name="TDir"> Identifies the visitor's class and can contain the state of the visit</typeparam>
        </member>
        <member name="T:NVisitor.Api.Lazy.ILazyDirector`2">
            <summary>Director's contract published to the visitors</summary>
            <typeparam name="TFamily">The node family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
        </member>
        <member name="M:NVisitor.Api.Lazy.LazyDirector`2.#ctor(System.Collections.Generic.IEnumerable{NVisitor.Api.Lazy.ILazyVisitorClass{`0,`1}})">
            <summary>Initializes a new dispatcher for a set of visitors</summary>
            <param name="visitors">list of visitors belonging to the same visitor class</param>
        </member>
        <member name="M:NVisitor.Api.Lazy.LazyDirector`2.#ctor(NVisitor.Api.Lazy.ILazyVisitorClass{`0,`1}[])">
            <summary>Initializes a new dispatcher for a set of visitors</summary>
            <param name="visitors">list of visitors belonging to the same visitor class</param>
        </member>
        <member name="M:NVisitor.Api.Lazy.LazyDirector`2.#ctor(NVisitor.Api.Lazy.ILazyVisitMapper{`0,`1})">
            <summary>Initializes a new dispatcher with a shared dispatcher</summary>
            <param name="cache">shared dispatcher for all directors of this type</param>
        </member>
        <member name="M:NVisitor.Api.Lazy.LazyDirector`2.Visit(`0)">
            <summary>Dispatches the call to the best visitor depending on the node's type</summary>
            <param name="node">The node to visit</param>
        </member>
        <member name="T:NVisitor.Api.Lazy.ILazyVisitorClass`2">
            <summary>Identify the class of visitors related to a director</summary>
        </member>
        <member name="T:NVisitor.Api.Lazy.ILazyVisitor`3">
            <summary>Visitor's contract</summary>
            <typeparam name="TFamily">The node family</typeparam>
            <typeparam name="TDir">The director type</typeparam>
            <typeparam name="TNode">The concrete node type supported by the visitor</typeparam>
        </member>
        <member name="M:NVisitor.Api.Lazy.ILazyVisitor`3.Visit(`1,`2)">
            <summary>The visit method to implement</summary>
            <param name="director">director to continue the visit or read/write into the director's state </param>
            <param name="node">The node to visit</param>
        </member>
        <member name="T:NVisitor.Api.Lazy.Pause">
            <summary>Used has dummy handle to pause the visit</summary>
        </member>
        <member name="M:NVisitor.Common.InvokeUtil.InvokeWithUnwrapper(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>Unwrap the TargetInvocationException if any is thrown </summary>
        </member>
        <member name="M:NVisitor.Common.Topo.TypeHelper.FindBestCandidateToAssignFrom(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <exception cref="T:NVisitor.Common.Topo.TargetTypeNotResolvedException"></exception>
        </member>
    </members>
</doc>
